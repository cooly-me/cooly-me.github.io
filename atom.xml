<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cooly-me.github.io</id>
    <title>cooly-me</title>
    <updated>2020-05-06T14:07:59.623Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cooly-me.github.io"/>
    <link rel="self" href="https://cooly-me.github.io/atom.xml"/>
    <subtitle>stay hungry，stay foolish</subtitle>
    <logo>https://cooly-me.github.io/images/avatar.png</logo>
    <icon>https://cooly-me.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, cooly-me</rights>
    <entry>
        <title type="html"><![CDATA[计算机综合：底层网络协议]]></title>
        <id>https://cooly-me.github.io/post/di-ceng-wang-luo-xie-yi/</id>
        <link href="https://cooly-me.github.io/post/di-ceng-wang-luo-xie-yi/">
        </link>
        <updated>2020-04-25T07:08:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="arp地址解析协议">ARP（地址解析协议）</h2>
<p>基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。在每台安装有TCP/IP协议的电脑或路由器里都有一个ARP缓存表，表里的IP地址与MAC地址是一对应的。</p>
<p>当发送数据时，主机A会在自己的ARP缓存表中寻找是否有目标IP地址。如果找到就知道目标MAC地址为（00-BB-00-62-C2-02），直接把目标MAC地址写入帧里面发送就可；如果在ARP缓存表中没有找到相对应的IP地址，主机A就会在网络上发送一个 <code>广播（ARP request）</code>，目标MAC地址是“FF.FF.FF.FF.FF.FF”，这表示向同一网段内的所有主机发出这样的询问：“192.168.38.11的MAC地址是什么？”网络上其他主机并不响应ARP询问，只有主机B接收到这个帧时，才向主机A做出这样的回应（ARP response）：“192.168.38.11的MAC地址是（00-BB-00-62-C2-02）”。这样，主机A就知道主机B的MAC地址，它就可以向主机B发送信息。同时它还更新自己的ARP缓存表，下次再向主机B发送信息时，直接从ARP缓存表里查找就可。<code>ARP缓存表采用老化机制</code>，在一段时间内如果表中的某一行没有使用，就会被删除，这样可以大大减少ARP缓存表的长度，加快查询速度。</p>
<blockquote>
<p>当发送主机和目的主机不在同一个局域网中时，即便知道目的主机的MAC地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过ARP协议获得的将不是目的主机的真实MAC地址，而是一台可以通往局域网外的路由器的MAC地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。这种情况称为ARP代理（ARP Proxy）。</p>
</blockquote>
<h2 id="icmp互联网控制消息协议">ICMP（互联网控制消息协议）</h2>
<p>它用于TCP/IP网络中发送控制消息，提供可能发生在通信环境中的各种问题反馈，通过这些信息，令管理者可以对所发生的问题作出诊断，然后采取适当的措施解决。它与传输协议最大的不同：它一般不用于在两点间传输数据，而常常 <code>用于返回的错误信息或是分析路由。</code></p>
<p>ICMP控制的内容包括但不仅限于：echo响应（ping）、目标网络不可达、目标端口不可达、禁止访问的网络、拥塞控制、重定向、TTL超时...</p>
<h2 id="路由选择协议">路由选择协议</h2>
<p>路由选择协议分为：静态的和动态的。Internet中使用的是动态路由选择协议，在Internet的概念中，将整个互联网划分为许多个小的自治系统（AS）。AS的最主要的特征：一个AS对其他AS表现出的是一个单一 和一致的路由选择策略。</p>
<p>由于AS的存在，路由选择协议又分为两种：</p>
<ul>
<li>内部网关协议（IGP）：即在一个AS内部使用的路由选择协议，而这与互联网中其他AS选用什么路由协议无关。比如：OSPF</li>
<li>外部网关协议（EGP）：若源主机和目的主机不再同一个AS中，就需要使用一种协议将路由选择信息传递到另一个AS中，这就是EGP。比如：BGP。</li>
</ul>
<h2 id="ospf开放式最短路径优先">OSPF（开放式最短路径优先）</h2>
<p>OSPF属于内部网关协议（IGP）的一种，使用Dijkstra提出的 <code>最短路径算法</code> 。</p>
<p>OSPF提出了“区域（Area）”的概念，一个网络可以由单一区域或者多个区域组成。其中，一个特别的区域被称为骨干区域（Backbone Area），该区域是整个OSPF网络的核心区域，并且所有其他的区域都与之直接连接。所有的内部路由都通过骨干区域传递到其他非骨干区域。所有的区域都必须直接连接到骨干区域，如果不能创建直接连接，那么可以通过虚拟链路（Virtual-link）和骨干区域创建虚拟连接。</p>
<p>划分区域的优点：</p>
<ul>
<li>
<p>将洪泛法的范围限制在一个区域中。</p>
</li>
<li>
<p>减少每个区域内部路由信息交换的通信量。</p>
</li>
<li>
<p>OSPF使用的是分布式链路状态协议，使用 洪泛法向该路由器所有的相邻路由器发送信息。最终整个区域的所有路由器都得到一个这个信息的副本。这个副本就是 <code>链路状态数据库（LSDB）用来保存当前网络拓扑结构</code>，路由器上属于同一区域的链路状态数据库是相同的（属于多个区域的路由器会为每个区域维护一份链路状态数据库）。</p>
</li>
<li>
<p>OSPF使用 <code>代价（Cost）</code>作为路由度量。</p>
</li>
<li>
<p>只有当链路发生变化时才会更新信息。</p>
</li>
</ul>
<blockquote>
<p>如果同一个目的网络有多条路径，OSPF协议可以进行 负载均衡。</p>
</blockquote>
<h2 id="bgp边界网关协议">BGP（边界网关协议）</h2>
<p>由于BGP是工作在AS之间的协议，并且各个AS的情况复杂，所以 <code>BGP只是力求找到一个可以到达目的网络且比较好的路由，而并不是寻找一条最佳路由</code>。每一个AS都应该有一个 “BGP发言人“，<code>一般来说，两个BGP发言人是通过一个共享网络连接在一起的，BGP发言人往往是BGP边界路由</code>，但也可以不是。</p>
<p>一个BGP发言人与其他AS的BGP发言人要交换路由信息，首先要建立TCP连接，然后在此连接上交换BGP报文以建立BGP会话。当BGP发言人交换了路由信息后，就构造自治系统连通图，最后通过该图来进行路由选择。</p>
<h2 id="dhcp动态主机设置协议">DHCP（动态主机设置协议）</h2>
<p>DHCP是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：</p>
<ul>
<li>用于内部网络或网络服务供应商自动分配IP地址给用户</li>
<li>用于内部网络管理员作为对所有电脑作中央管理的手段</li>
</ul>
<p><code>动态主机设置协议（DHCP）是一种使网络管理员能够集中管理和自动分配IP网络地址的通信协议</code>。在IP网络中，每个连接Internet的设备都需要分配唯一的IP地址。DHCP使网络管理员能从中心结点监控和分配IP地址。当某台计算机移到网络中的其它位置时，能自动收到新的IP地址。</p>
<p>DHCP使用了 <code>租约</code> 的概念，或称为计算机IP地址的有效期。租用时间是不定的，主要取决于用户在某地连接Internet需要多久，这对于教育行业和其它用户频繁改变的环境是很实用的。通过较短的租期，DHCP能够在一个计算机比可用IP地址多的环境中动态地重新配置网络。DHCP支持为计算机分配静态地址，如需要永久性IP地址的Web服务器。</p>
<h2 id="nat地址转换协议">NAT（地址转换协议）</h2>
<p>NAT是一种 <code>在IP封包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术</code>。这种技术被普遍使用在有多台主机但只通过一个公有IP地址访问因特网的私有网络中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机综合：网络分层]]></title>
        <id>https://cooly-me.github.io/post/wang-luo-fen-ceng/</id>
        <link href="https://cooly-me.github.io/post/wang-luo-fen-ceng/">
        </link>
        <updated>2020-04-25T06:58:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="osi模型">OSI模型</h1>
<h3 id="应用层">应用层</h3>
<p>网络进程到应用程序。针对特定应用规定各层协议、时序、表示等，进行封装 。在端系统中用软件来实现，如HTTP等</p>
<h3 id="表示层">表示层</h3>
<p>数据表示形式，加密和解密，把机器相关的数据转换成独立于机器的数据。规定数据的格式化表示 ，数据格式的转换等</p>
<h3 id="会话层">会话层</h3>
<p>主机间通讯，管理应用程序之间的会话。规定通信时序 ；数据交换的定界、同步，创建检查点等</p>
<h3 id="传输层">传输层</h3>
<p>在网络的各个节点之间可靠地分发数据包。所有传输遗留问题；复用；流量；可靠</p>
<h3 id="网络层">网络层</h3>
<p>在网络的各个节点之间进行地址分配、路由和（不一定可靠的）分发报文。路由（ IP寻址）；拥塞控制。</p>
<h3 id="数据链路层">数据链路层</h3>
<p>一个可靠的点对点数据直链。检错与纠错（CRC码）；多路访问；寻址</p>
<h3 id="物理层">物理层</h3>
<p>一个（不一定可靠的）点对点数据直链。定义机械特性；电气特性；功能特性；规程特性</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker 搭建Mysql集群]]></title>
        <id>https://cooly-me.github.io/post/docker-da-jian-mysql-ji-qun/</id>
        <link href="https://cooly-me.github.io/post/docker-da-jian-mysql-ji-qun/">
        </link>
        <updated>2020-04-23T13:16:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker基本指令">docker基本指令：</h3>
<h3 id="更新软件包">更新软件包</h3>
<p><code>yum -y update</code></p>
<h3 id="安装docker虚拟机centos-7">安装Docker虚拟机（centos 7）</h3>
<p><code>yum install -y docker</code></p>
<h3 id="运行-重启-关闭docker虚拟机">运行、重启、关闭Docker虚拟机</h3>
<p><code>service docker start</code><br>
<code>service docker stop</code></p>
<h3 id="搜索镜像">搜索镜像</h3>
<p><code>docker search 镜像名称</code></p>
<h3 id="下载镜像">下载镜像</h3>
<p><code>docker pull 镜像名称</code></p>
<h3 id="查看镜像">查看镜像</h3>
<p><code>docker images</code></p>
<h3 id="删除镜像">删除镜像</h3>
<p><code>docker rmi 镜像名称</code></p>
<h3 id="运行容器">运行容器</h3>
<p><code>docker run 启动参数 镜像名称</code></p>
<h3 id="查看容器列表">查看容器列表</h3>
<p><code>docker ps -a</code></p>
<h4 id="当我们想要使用java环境我们可以这么操作">当我们想要使用java环境，我们可以这么操作：</h4>
<pre><code>搜索：
[root@VM_71_225_centos ~]# docker search java
INDEX       NAME                                                   DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
docker.io   docker.io/node                                         Node.js is a JavaScript-based platform for...   5752      [OK]
docker.io   docker.io/tomcat                                       Apache Tomcat is an open source implementa...   1891      [OK]
docker.io   docker.io/java                                         Java is a concurrent, class-based, and obj...   1745      [OK]
docker.io   docker.io/openjdk                                      OpenJDK is an open-source implementation o...   1031      [OK]
</code></pre>
<pre><code>下载：
[root@VM_71_225_centos ~]# docker pull docker.io/java
Using default tag: latest
Trying to pull repository docker.io/library/java ...
latest: Pulling from docker.io/library/java
5040bd298390: Downloading [=&gt;                                                 ] 1.572 MB/51.36 MB
</code></pre>
<pre><code>运行：
[root@VM_71_225_centos ~]# docker run -it --name myjava docker.io/java bash
root@25623e12b759:/# java
-i: 以交互模式运行容器，通常与 -t 同时使用；

-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；

</code></pre>
<h2 id="安装pxc集群在此不做mysql-pxc集群与replication集群的方案优劣说明在此选用pxc集群方案多节点备份与强联合性">安装PXC集群（在此不做mysql pxc集群与replication集群的方案优劣说明，在此选用pxc集群方案[多节点备份与强联合性]）：</h2>
<h3 id="安装pxc镜像">安装PXC镜像</h3>
<p><code>docker pull percona/percona-xtradb-cluster</code></p>
<p>查看本地镜像</p>
<pre><code>[root@VM_71_225_centos ~]# docker images
REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE
docker.io/hello-world                      latest              e38bc07ac18e        2 months ago        1.85 kB
docker.io/percona/percona-xtradb-cluster   latest              f1439de62087        3 months ago        413 MB
docker.io/java                             latest              d23bdf5b1b1b        17 months ago       643 MB
</code></pre>
<p>docker.io/percona/percona-xtradb-cluster 太长，进行改名：</p>
<pre><code>[root@VM_71_225_centos ~]# docker tag percona/percona-xtradb-cluster pxc
[root@VM_71_225_centos ~]# docker images
REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE
docker.io/hello-world                      latest              e38bc07ac18e        2 months ago        1.85 kB
docker.io/percona/percona-xtradb-cluster   latest              f1439de62087        3 months ago        413 MB
pxc                                        latest              f1439de62087        3 months ago        413 MB
docker.io/java                             latest              d23bdf5b1b1b        17 months ago       643 MB
</code></pre>
<h3 id="创建net1网段">创建net1网段：</h3>
<p><code>docker network create --subnet=172.18.0.0/16 net1</code></p>
<h3 id="创建五个数据卷pxc无法直接存取宿组机的数据所以创建五个docker数据卷">创建五个数据卷（pxc无法直接存取宿组机的数据，所以创建五个docker数据卷）</h3>
<pre><code>docker volume create v1
docker volume create v2
docker volume create v3
docker volume create v4
docker volume create v5
</code></pre>
<h3 id="查看数据卷位置">查看数据卷位置：</h3>
<pre><code>[root@VM_71_225_centos code]# docker inspect v1
[
    {
        &quot;Driver&quot;: &quot;local&quot;,
        &quot;Labels&quot;: {},
        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/v1/_data&quot;,
        &quot;Name&quot;: &quot;v1&quot;,
        &quot;Options&quot;: {},
        &quot;Scope&quot;: &quot;local&quot;
    }
]
</code></pre>
<h3 id="创建5节点的pxc集群">创建5节点的PXC集群</h3>
<pre><code>#创建第1个MySQL节点
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc
</code></pre>
<h3 id="等待2分钟后再创建第二个节点等待第一个节点实例化完毕后才能开启第二个节点实例不然会瞬间停止">等待2分钟后，再创建第二个节点，等待第一个节点实例化完毕后，才能开启第二个节点实例，不然会瞬间停止</h3>
<h3 id="创建其他节点">创建其他节点：</h3>
<pre><code>#创建第2个MySQL节点
docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc
#创建第3个MySQL节点
docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc
#创建第4个MySQL节点
docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v4:/var/lib/mysql --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc
#创建第5个MySQL节点
docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc
</code></pre>
<h3 id="测试在任意mysql节点创建数据库">测试在任意mysql节点创建数据库：</h3>
<pre><code> mysql -h 172.18.0.3 -uroot -pabc123456 

mysql&gt; create database test;
Query OK, 1 row affected (0.03 sec)
</code></pre>
<h3 id="登录其他节点数据库能看到已经进行了同步构成简单的mysql集群">登录其他节点数据库，能看到已经进行了同步，构成简单的mysql集群</h3>
<h2 id="安装haproxy进行高可用与负载均衡">安装Haproxy进行高可用与负载均衡</h2>
<h3 id="拉取haproxy">拉取haproxy</h3>
<p><code>docker pull haproxy</code></p>
<h3 id="编写haproxy配置文件">编写Haproxy配置文件</h3>
<p><code>vi /home/soft/haproxy.cfg</code></p>
<h3 id="配置文件如下">配置文件如下：</h3>
<pre><code>global
    #工作目录
    chroot /usr/local/etc/haproxy
    #日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info
    log 127.0.0.1 local5 info
    #守护进程运行
    daemon
​
defaults
    log global
    mode    http
    #日志格式
    option  httplog
    #日志中不记录负载均衡的心跳检测记录
    option  dontlognull
    #连接超时（毫秒）
    timeout connect 5000
    #客户端超时（毫秒）
    timeout client  50000
    #服务器超时（毫秒）
    timeout server  50000
​
#监控界面   
listen  admin_stats
    #监控界面的访问的IP和端口
    bind  0.0.0.0:8888
    #访问协议
    mode        http
    #URI相对地址
    stats uri   /dbs
    #统计报告格式
    stats realm     Global\ statistics
    #登陆帐户信息
    stats auth  admin:abc123456
#数据库负载均衡
listen  proxy-mysql
    #访问的IP和端口
    bind  0.0.0.0:3306  
    #网络协议
    mode  tcp
    #负载均衡算法（轮询算法）
    #轮询算法：roundrobin
    #权重算法：static-rr
    #最少连接算法：leastconn
    #请求源IP算法：source 
    balance  roundrobin
    #日志格式
    option  tcplog
    #在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测
    option  mysql-check user haproxy
    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  
    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  
    server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 
    server  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000
    server  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000
    #使用keepalive检测死链
    option  tcpka  
</code></pre>
<h3 id="创建第1个haproxy负载均衡服务器">创建第1个Haproxy负载均衡服务器</h3>
<pre><code>docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy
</code></pre>
<h3 id="进入h1容器启动haproxy">进入h1容器，启动Haproxy</h3>
<pre><code>docker exec -it h1 bash
haproxy -f /usr/local/etc/haproxy/haproxy.cfg
</code></pre>
<h2 id="查看是否启动成功">查看是否启动成功：</h2>
<h3 id="访问httpip4001dbs">访问http://ip:4001/dbs</h3>
<h2 id="安装keepalive实现双击热备">安装keepalive实现双击热备</h2>
]]></content>
    </entry>
</feed>