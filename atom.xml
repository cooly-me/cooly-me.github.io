<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cooly-me.github.io</id>
    <title>cooly-me</title>
    <updated>2020-04-24T15:29:53.607Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cooly-me.github.io"/>
    <link rel="self" href="https://cooly-me.github.io/atom.xml"/>
    <subtitle>stay hungry，stay foolish</subtitle>
    <logo>https://cooly-me.github.io/images/avatar.png</logo>
    <icon>https://cooly-me.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, cooly-me</rights>
    <entry>
        <title type="html"><![CDATA[docker 搭建Mysql集群]]></title>
        <id>https://cooly-me.github.io/post/docker-da-jian-mysql-ji-qun/</id>
        <link href="https://cooly-me.github.io/post/docker-da-jian-mysql-ji-qun/">
        </link>
        <updated>2020-04-23T13:16:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker基本指令">docker基本指令：</h3>
<h3 id="更新软件包">更新软件包</h3>
<p><code>yum -y update</code></p>
<h3 id="安装docker虚拟机centos-7">安装Docker虚拟机（centos 7）</h3>
<p><code>yum install -y docker</code></p>
<h3 id="运行-重启-关闭docker虚拟机">运行、重启、关闭Docker虚拟机</h3>
<p><code>service docker start</code><br>
<code>service docker stop</code></p>
<h3 id="搜索镜像">搜索镜像</h3>
<p><code>docker search 镜像名称</code></p>
<h3 id="下载镜像">下载镜像</h3>
<p><code>docker pull 镜像名称</code></p>
<h3 id="查看镜像">查看镜像</h3>
<p><code>docker images</code></p>
<h3 id="删除镜像">删除镜像</h3>
<p><code>docker rmi 镜像名称</code></p>
<h3 id="运行容器">运行容器</h3>
<p><code>docker run 启动参数 镜像名称</code></p>
<h3 id="查看容器列表">查看容器列表</h3>
<p><code>docker ps -a</code></p>
<h4 id="当我们想要使用java环境我们可以这么操作">当我们想要使用java环境，我们可以这么操作：</h4>
<pre><code>搜索：
[root@VM_71_225_centos ~]# docker search java
INDEX       NAME                                                   DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
docker.io   docker.io/node                                         Node.js is a JavaScript-based platform for...   5752      [OK]
docker.io   docker.io/tomcat                                       Apache Tomcat is an open source implementa...   1891      [OK]
docker.io   docker.io/java                                         Java is a concurrent, class-based, and obj...   1745      [OK]
docker.io   docker.io/openjdk                                      OpenJDK is an open-source implementation o...   1031      [OK]
</code></pre>
<pre><code>下载：
[root@VM_71_225_centos ~]# docker pull docker.io/java
Using default tag: latest
Trying to pull repository docker.io/library/java ...
latest: Pulling from docker.io/library/java
5040bd298390: Downloading [=&gt;                                                 ] 1.572 MB/51.36 MB
</code></pre>
<pre><code>运行：
[root@VM_71_225_centos ~]# docker run -it --name myjava docker.io/java bash
root@25623e12b759:/# java
-i: 以交互模式运行容器，通常与 -t 同时使用；

-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；

</code></pre>
<h2 id="安装pxc集群在此不做mysql-pxc集群与replication集群的方案优劣说明在此选用pxc集群方案多节点备份与强联合性">安装PXC集群（在此不做mysql pxc集群与replication集群的方案优劣说明，在此选用pxc集群方案[多节点备份与强联合性]）：</h2>
<h3 id="安装pxc镜像">安装PXC镜像</h3>
<p><code>docker pull percona/percona-xtradb-cluster</code></p>
<p>查看本地镜像</p>
<pre><code>[root@VM_71_225_centos ~]# docker images
REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE
docker.io/hello-world                      latest              e38bc07ac18e        2 months ago        1.85 kB
docker.io/percona/percona-xtradb-cluster   latest              f1439de62087        3 months ago        413 MB
docker.io/java                             latest              d23bdf5b1b1b        17 months ago       643 MB
</code></pre>
<p>docker.io/percona/percona-xtradb-cluster 太长，进行改名：</p>
<pre><code>[root@VM_71_225_centos ~]# docker tag percona/percona-xtradb-cluster pxc
[root@VM_71_225_centos ~]# docker images
REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE
docker.io/hello-world                      latest              e38bc07ac18e        2 months ago        1.85 kB
docker.io/percona/percona-xtradb-cluster   latest              f1439de62087        3 months ago        413 MB
pxc                                        latest              f1439de62087        3 months ago        413 MB
docker.io/java                             latest              d23bdf5b1b1b        17 months ago       643 MB
</code></pre>
<h3 id="创建net1网段">创建net1网段：</h3>
<p><code>docker network create --subnet=172.18.0.0/16 net1</code></p>
<h3 id="创建五个数据卷pxc无法直接存取宿组机的数据所以创建五个docker数据卷">创建五个数据卷（pxc无法直接存取宿组机的数据，所以创建五个docker数据卷）</h3>
<pre><code>docker volume create v1
docker volume create v2
docker volume create v3
docker volume create v4
docker volume create v5
</code></pre>
<h3 id="查看数据卷位置">查看数据卷位置：</h3>
<pre><code>[root@VM_71_225_centos code]# docker inspect v1
[
    {
        &quot;Driver&quot;: &quot;local&quot;,
        &quot;Labels&quot;: {},
        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/v1/_data&quot;,
        &quot;Name&quot;: &quot;v1&quot;,
        &quot;Options&quot;: {},
        &quot;Scope&quot;: &quot;local&quot;
    }
]
</code></pre>
<h3 id="创建5节点的pxc集群">创建5节点的PXC集群</h3>
<pre><code>#创建第1个MySQL节点
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc
</code></pre>
<h3 id="等待2分钟后再创建第二个节点等待第一个节点实例化完毕后才能开启第二个节点实例不然会瞬间停止">等待2分钟后，再创建第二个节点，等待第一个节点实例化完毕后，才能开启第二个节点实例，不然会瞬间停止</h3>
<h3 id="创建其他节点">创建其他节点：</h3>
<pre><code>#创建第2个MySQL节点
docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc
#创建第3个MySQL节点
docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc
#创建第4个MySQL节点
docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v4:/var/lib/mysql --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc
#创建第5个MySQL节点
docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc
</code></pre>
<h3 id="测试在任意mysql节点创建数据库">测试在任意mysql节点创建数据库：</h3>
<pre><code> mysql -h 172.18.0.3 -uroot -pabc123456 

mysql&gt; create database test;
Query OK, 1 row affected (0.03 sec)
</code></pre>
<h3 id="登录其他节点数据库能看到已经进行了同步构成简单的mysql集群">登录其他节点数据库，能看到已经进行了同步，构成简单的mysql集群</h3>
<h2 id="安装haproxy进行高可用与负载均衡">安装Haproxy进行高可用与负载均衡</h2>
<h3 id="拉取haproxy">拉取haproxy</h3>
<p><code>docker pull haproxy</code></p>
<h3 id="编写haproxy配置文件">编写Haproxy配置文件</h3>
<p><code>vi /home/soft/haproxy.cfg</code></p>
<h3 id="配置文件如下">配置文件如下：</h3>
<pre><code>global
    #工作目录
    chroot /usr/local/etc/haproxy
    #日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info
    log 127.0.0.1 local5 info
    #守护进程运行
    daemon
​
defaults
    log global
    mode    http
    #日志格式
    option  httplog
    #日志中不记录负载均衡的心跳检测记录
    option  dontlognull
    #连接超时（毫秒）
    timeout connect 5000
    #客户端超时（毫秒）
    timeout client  50000
    #服务器超时（毫秒）
    timeout server  50000
​
#监控界面   
listen  admin_stats
    #监控界面的访问的IP和端口
    bind  0.0.0.0:8888
    #访问协议
    mode        http
    #URI相对地址
    stats uri   /dbs
    #统计报告格式
    stats realm     Global\ statistics
    #登陆帐户信息
    stats auth  admin:abc123456
#数据库负载均衡
listen  proxy-mysql
    #访问的IP和端口
    bind  0.0.0.0:3306  
    #网络协议
    mode  tcp
    #负载均衡算法（轮询算法）
    #轮询算法：roundrobin
    #权重算法：static-rr
    #最少连接算法：leastconn
    #请求源IP算法：source 
    balance  roundrobin
    #日志格式
    option  tcplog
    #在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测
    option  mysql-check user haproxy
    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  
    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  
    server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 
    server  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000
    server  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000
    #使用keepalive检测死链
    option  tcpka  
</code></pre>
<h3 id="创建第1个haproxy负载均衡服务器">创建第1个Haproxy负载均衡服务器</h3>
<pre><code>docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy
</code></pre>
<h3 id="进入h1容器启动haproxy">进入h1容器，启动Haproxy</h3>
<pre><code>docker exec -it h1 bash
haproxy -f /usr/local/etc/haproxy/haproxy.cfg
</code></pre>
<h2 id="查看是否启动成功">查看是否启动成功：</h2>
<h3 id="访问httpip4001dbs">访问http://ip:4001/dbs</h3>
<h2 id="安装keepalive实现双击热备">安装keepalive实现双击热备</h2>
]]></content>
    </entry>
</feed>